from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv
import os
from supabase import create_client, Client
from openai import OpenAI

load_dotenv()

app = FastAPI()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print(f"‚úÖ SUPABASE_URL : {SUPABASE_URL}")
print(f"‚úÖ SUPABASE_KEY (d√©but) : {SUPABASE_KEY[:20]}...")
print(f"‚úÖ OPENAI_API_KEY (d√©but) : {OPENAI_API_KEY[:20]}...")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
openai_client = OpenAI(api_key=OPENAI_API_KEY)


class Projet(BaseModel):
    description_projet: str


@app.post("/chiffrage")
async def chiffrage(projet: Projet):
    try:
        print("üîç Envoi √† OpenAI...")

        messages = [
            {"role": "system", "content": "Tu es un expert en chiffrage de travaux d‚Äôam√©nagement ext√©rieur."},
            {"role": "user", "content": f"Fais-moi 5 propositions de devis pour ce projet : {projet.description_projet}. Format JSON avec d√©signation, prix_unitaire_ht et unit√©_metier."}
        ]

        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7
        )

        ai_reply = response.choices[0].message.content
        print("‚úÖ R√©ponse OpenAI re√ßue")

        return {"devis": ai_reply}

    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        raise HTTPException(status_code=500, detail=str(e))
